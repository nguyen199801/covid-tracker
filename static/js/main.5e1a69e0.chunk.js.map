{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","printStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","pathOptions","fillColor","fillOpacity","radius","Math","sqrt","Popup","src","flag","alt","SetViewOnClick","useMap","setView","getZoom","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","some","e","find","console","log","FormControl","TextField","id","onChange","Select","variant","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e1a69e0.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./InfoBox.css\"\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nfunction InfoBox({ title, cases, active, isRed, total, ...props }) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"\r\n            }`}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                <Typography className=\"infoBox__total\" >\r\n                    Total: {total}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport {\r\n    Circle,\r\n    Popup\r\n} from \"react-leaflet\";\r\n\r\n\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        rgb: \"rgb(204, 16, 52)\",\r\n        half_op: \"rgba(204, 16, 52, 0.5)\",\r\n        multiplier: 400,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        rgb: \"rgb(125, 215, 29)\",\r\n        half_op: \"rgba(125, 215, 29, 0.5)\",\r\n        multiplier: 500,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        rgb: \"rgb(251, 68, 67)\",\r\n        half_op: \"rgba(251, 68, 67, 0.5)\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\n\r\n\r\nexport const sortData = (data) => {\r\n    let sortedData = [...data];\r\n    sortedData.sort((a, b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    });\r\n    return sortedData;\r\n};\r\n\r\n\r\nexport const printStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\n//Draw circles on the map with interactive tooltip\r\nexport const showDataOnMap = (data, casesType) => {\r\n    return (\r\n        data.map(country => (\r\n            < Circle\r\n                center={[country.countryInfo.lat, country.countryInfo.long]}\r\n                pathOptions={{\r\n                    color: casesTypeColors[casesType].hex,\r\n                    fillColor: casesTypeColors[casesType].hex\r\n                }}\r\n                fillOpacity={0.4}\r\n                radius={\r\n                    Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n                }\r\n            >\r\n                <Popup className=\"info-container\">\r\n                    <div >\r\n                        <div className=\"info-flag\">\r\n                            <img className=\"flag\" src={country.countryInfo.flag} alt=\"flag\" />\r\n                        </div>\r\n                        <div className=\"info-country\">\r\n                            <div className=\"info-name\"><b>{country.country}</b></div>\r\n                            <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                            <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                            <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </Popup>\r\n            </Circle >\r\n        ))\r\n    )\r\n};","import React from 'react';\r\nimport './Map.css';\r\nimport { MapContainer as LeafletMap, TileLayer, useMap } from \"react-leaflet\";\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction SetViewOnClick({ center }) {\r\n    const map = useMap();\r\n    map.setView(center, map.getZoom());\r\n\r\n    return null;\r\n}\r\n\r\nfunction Map({ center, casesType, countries }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={4}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n\r\n                <SetViewOnClick center={center} />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map\r\n","import React from 'react';\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({ country, cases }) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    // Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=100\")\r\n                .then((response) => {\r\n                    return response.json();\r\n                })\r\n                .then((data) => {\r\n                    let chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                    // buildChart(chartData);\r\n                });\r\n        };\r\n\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n                    options={options}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, printStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n  TextField\n} from \"@material-ui/core\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(['worldwide']);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80764, lng: -40.4796 });\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2\n            }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n\n\n\n  const onCountryChange = async (event) => {\n\n    let countryCode = event.target.value;\n\n    if (countries.some(e => e.name === countryCode)) {\n      let country = countries.find(e => e.name === countryCode);\n      countryCode = country.value;\n    }\n\n    if (countries.some(e => e.value === countryCode) || countryCode === 'worldwide') {\n      console.log(countryCode);\n      const url = countryCode === 'worldwide'\n        ? 'https://disease.sh/v3/covid-19/countries'\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n      await fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          if (countryCode === 'worldwide') {\n            setMapCountries(data);\n            fetch(\"https://disease.sh/v3/covid-19/all\")\n              .then((response) => response.json())\n              .then((data) => {\n                setCountryInfo(data);\n              });\n            return;\n          }\n\n          setCountry(countryCode);\n          setCountryInfo(data);\n          var country = [];\n          country.push(data);\n          setMapCountries(country);\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        })\n    }\n  };\n\n\n\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n\n          <FormControl className=\"app__searchfield\">\n            <TextField id=\"standard-basic\" label=\"Search Country\" onChange={onCountryChange} />\n          </FormControl>\n\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {\n                countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n\n              }\n            </Select>\n          </FormControl>\n\n\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox isRed active={casesType === \"cases\"} onClick={e => setCasesType('cases')} title=\"Coronavirus cases\" cases={printStat(countryInfo.todayCases)} total={countryInfo.cases} />\n          <InfoBox active={casesType === \"recovered\"} onClick={e => setCasesType('recovered')} title=\"Recovered\" cases={printStat(countryInfo.todayRecovered)} total={countryInfo.recovered} />\n          <InfoBox isRed active={casesType === \"deaths\"} onClick={e => setCasesType('deaths')} title=\"Deaths\" cases={printStat(countryInfo.todayDeaths)} total={countryInfo.deaths} />\n        </div>\n\n        <Map casesType={casesType} center={mapCenter} countries={mapCountries} />\n\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"dataTable\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n          </div>\n\n          <div className=\"lineGraph\">\n            <h3>Worldwide new {casesType}}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}