{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","Card","CardContent","Typography","className","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","SetViewOnClick","useMap","setView","getZoom","Map","countries","console","log","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapCountries","setMapCountries","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3be88eb8.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nfunction InfoBox({ title, cases, total }) {\r\n    return (\r\n        <Card>\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n\r\n                <h2 className=\"infoBox__cases\">{cases}</h2>\r\n                <Typography className=\"infoBox__toal\" color=\"textSecondary\">\r\n                    Total {total}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport {\r\n    Circle,\r\n    Popup\r\n} from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        rgb: \"rgb(204, 16, 52)\",\r\n        half_op: \"rgba(204, 16, 52, 0.5)\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        rgb: \"rgb(125, 215, 29)\",\r\n        half_op: \"rgba(125, 215, 29, 0.5)\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        rgb: \"rgb(251, 68, 67)\",\r\n        half_op: \"rgba(251, 68, 67, 0.5)\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\n\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1);\r\n};\r\n\r\n\r\n//Draw circles on the map with interactive tooltip\r\nexport const showDataOnMap = (data, casesType = 'cases') => (\r\n    data.map(country => (\r\n\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup className=\"info-container\">\r\n                <div >\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                    />\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n\r\n        </Circle>\r\n    ))\r\n);","import React from 'react';\r\nimport './Map.css';\r\nimport { MapContainer as LeafletMap, TileLayer, useMap } from \"react-leaflet\";\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction SetViewOnClick({ center }) {\r\n    const map = useMap();\r\n    map.setView(center, map.getZoom());\r\n\r\n    return null;\r\n}\r\n\r\nfunction Map({ center, casesType, countries }) {\r\n    console.log(center);\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={4}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n\r\n                <SetViewOnClick center={center} />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport \"./Table.css\"\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({ country, cases }) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{cases}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    // Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=100\")\r\n                .then((response) => {\r\n                    return response.json();\r\n                })\r\n                .then((data) => {\r\n                    let chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                    console.log(chartData);\r\n                    // buildChart(chartData);\r\n                });\r\n        };\r\n\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n                    options={options}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent\n} from \"@material-ui/core\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(['worldwide']);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80764, lng: -40.4796 });\n  const [mapCountries, setMapCountries] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        // console.log(data);\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2\n            }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide'\n      ? 'https://disease.sh/v3/covid-19/all'\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        var country = [];\n        country.push(data);\n        setMapCountries(country);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      })\n  };\n\n\n\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country} >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {\n                countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n\n              }\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox title=\"Coronavirus cases\" cases={countryInfo.todayCases} total={countryInfo.cases} />\n          <InfoBox title=\"Recovered\" cases={countryInfo.todayRecovered} total={countryInfo.recovered} />\n          <InfoBox title=\"Deaths\" cases={countryInfo.todayDeaths} total={countryInfo.deaths} />\n        </div>\n\n        <Map center={mapCenter} countries={mapCountries} />\n\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3>Worldwide new cases</h3>\n          <LineGraph />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}